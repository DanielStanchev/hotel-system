services:
  postgres:
    image: postgres:latest
    container_name: hotelDB
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: hotel
    ports:
      - "5444:5432"
    volumes:
      - db:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - mynetwork

  hotel:
    container_name: hotel
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/hotel
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=admin
      - spring.boot.admin.client.url=http://springbootadmin:8085
      - spring.boot.admin.client.instance.management-url=http://hotel:8081/actuator
      - spring.boot.admin.client.instance.service-url=http://hotel:8081/
      - spring.boot.admin.client.instance.health-url=http://hotel:8081/actuator/health
    ports:
      - "8081:8081"
    depends_on:
      - postgres
    networks:
      - mynetwork

  comments:
    container_name: comments
    build:
      context: ../comments
      dockerfile: Dockerfile
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/comments
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=admin
      - spring.boot.admin.client.url=http://springbootadmin:8085
      - spring.boot.admin.client.instance.management-url=http://hotel:8082/actuator
      - spring.boot.admin.client.instance.service-url=http://hotel:8082/
      - spring.boot.admin.client.instance.health-url=http://hotel:8082/actuator/health
    ports:
      - "8082:8082"
    depends_on:
      - postgres
    networks:
      - mynetwork

  authentication:
    container_name: authentication
    build:
      context: ../authentication
      dockerfile: Dockerfile
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/authentication
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=admin
      - spring.boot.admin.client.url=http://springbootadmin:8085
      - spring.boot.admin.client.instance.management-url=http://hotel:8083/actuator
      - spring.boot.admin.client.instance.service-url=http://hotel:8083/
      - spring.boot.admin.client.instance.health-url=http://hotel:8083/actuator/health
      - spring.kafka.bootstrap-servers=kafka:9092
    ports:
      - "8083:8083"
    depends_on:
      - postgres
      - kafka
    networks:
      - mynetwork

  bff:
    container_name: bff
    build:
      context: ../bff
      dockerfile: Dockerfile
    environment:
      - hotel.url=http://hotel:8081
      - comments.url=http://comments:8082
      - authentication.url=http://authentication:8083
      - spring.boot.admin.client.url=http://springbootadmin:8085
      - spring.boot.admin.client.instance.management-url=http://hotel:8084/actuator
      - spring.boot.admin.client.instance.service-url=http://hotel:8084/
      - spring.boot.admin.client.instance.health-url=http://hotel:8084/actuator/health
    ports:
      - "8084:8084"
    depends_on:
      - hotel
      - comments
      - authentication
      - postgres
    networks:
      - mynetwork

  springbootadmin:
    build:
      context: ../spring-boot-admin
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    networks:
      - mynetwork

  email:
    build:
      context: ../email
      dockerfile: Dockerfile
    environment:
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/email
#      - SPRING_DATASOURCE_USERNAME=admin
#      - SPRING_DATASOURCE_PASSWORD=admin
      - kafka.url=kafka:9092
      - spring.kafka.bootstrap-servers=kafka:9092
    ports:
      - "8086:8086"
    depends_on:
#      - postgres
      - kafka
    networks:
      - mynetwork

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - mynetwork

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_LISTENER_NAME: INSIDE
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    networks:
      - mynetwork


volumes:
  db:

networks:
  mynetwork:
    driver: bridge